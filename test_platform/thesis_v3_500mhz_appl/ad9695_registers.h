/**
 * \file ad9695_reg.h
 *
 * \brief AD9695 SPI Register Definition Header File
 *
 * Release 1.0.X
 *
 * Copyright(c) 2017 Analog Devices, Inc. All Rights Reserved.
 * This software is proprietary to Analog Devices, Inc. and its licensors.
 * By using this software you agree to the terms of the associated
 * Analog Devices Software License Agreement.
 */
#ifndef AD9695_REG_H
#define AD9695_REG_H

#define SET_BIT(x) (1 << (x))

#define AD9695_JESD_NOF_LANES 4
#define AD9695_JESD_NOF_LINKS 1
#define AD9695_JESD_NOF_SYNCOUTB 1
#define AD9695_ADC_NOF_CH 2

// So Channel 2 becomes (1<<2)>>1 = 10
#define AD9695_ADC_CH_INDEX(x) (SET_BIT(x) >> 1)

/*REGISTER SUMMARY : (AD9695_REGMAP_V4)*/
#define AD9695_IF_CFG_A_REG 0x000
#define AD9695_IF_CFG_B_REG 0x001
#define AD9695_DEV_CFG_REG 0x002

// last 2 bits
#define AD9695_PDN_MODE(x) (((x)&0b00000011) << 0)

#define AD9695_CHIP_TYPE_REG 0x0003
#define AD9695_PROD_ID_LSB_REG 0x0004
#define AD9695_PROD_ID_MSB_REG 0x0005
#define AD9695_CHIP_GRADE_REG 0x0006
#define AD9695_CH_INDEX_REG 0x0008
#define AD9695_CH_INDEX_SEL(x) (((x)&0b00000011) << 0)

#define AD9695_CHANNEL_PAGE_0 SET_BIT(0)
#define AD9695_CHANNEL_PAGE_1 SET_BIT(1)
#define AD9695_CHANNEL_PAGE_2 SET_BIT(2)
#define AD9695_CHANNEL_PAGE_3 SET_BIT(3)
#define AD9695_CHANNEL_PAGE_4 SET_BIT(4)
#define AD9695_CHANNEL_PAGE_5 SET_BIT(5)
#define AD9695_MAINDAC_PAGE_0 SET_BIT(6)
#define AD9695_MAINDAC_PAGE_1 SET_BIT(7)

// Scratch Pad
#define AD9695_SCRATCH_REG 0x000A

// DDC phase increment and phase offset regiser xfer, we don't really need it
#define AD9695_CHIP_SPI_XFER_REG 0x000F
#define AD9695_CHIP_TRIGGER_SPI_XFER SET_BIT(0)

// local chip power down pin disable
#define AD9695_CHIP_PIN_CTRL0_REG 0x03F
#define AD9695_CHIP_PDN_PIN_DISABLE SET_BIT(7)

// these looks weird
#define AD9695_CHIP_PIN_CTRL1_REG 0x040
#define AD9695_CHIP_PDN_MODE(x) (((x)&0b11000000) << 6)
#define AD9695_CHIP_PIN_CTRL_MASK(x) (0b00000111 << (3 * (x)))

// sample clock divider
#define AD9695_IP_CLK_CFG_REG 0x0108
#define AD9695_IP_CLK_DIV(x) (((x)&0b00000011) << 0)

// sample clock phase control (local)
#define AD9695_IP_CLK_PHASE_ADJ_REG 0x0109
#define AD9695_IP_CLK_PHASE_ADJ(x) (((x)&0b00001111) << 0)

// ADDED: CLOCK DELAY CONTROLS
#define AD9695_CLK_DELAY_CTRL_REG 0x0110
#define AD9695_NO_CLOCK_DELAY 0x00
#define AD9695_FINE_DELAY_16 0x02
#define AD9695_FINE_DELAY_16_LOW_JITTER 0x03
#define AD9695_FINE_DELAY_192 0x04
#define AD9695_SUPERFINE_DELAY 0x06

#define AD9695_CLK_SUPER_FINE_DELAY_REG 0x0111
#define AD9695_CLK_FINE_DELAY_REG 0x0112

// Clock Detection Reg
#define AD9695_IP_CLK_STAT_REG 0x011B

// Duty Cycle Stablizers
#define AD9695_IP_CLK_DCS1_REG 0x011C
#define AD9695_IP_CLK_DCS2_REG 0x011E

// SYSREF Signal Controls, we can ignore these in Subclass 0
#define AD9695_SYSREF_CTRL_0_REG 0x0120
#define AD9695_SYSREF_MODE_SEL(x) (((x)&0x3) << 1)
#define AD9695_SYSREF_CTRL_1_REG 0x0121
#define AD9695_SYSREF_TRANSITION_SEL(x) (((x)&0x1) << 4)
#define AD9695_SYSREF_CLK_EDGE_SEL(x) (((x)&0x1) << 3)
#define AD9695_SYSREF_NSHOT_IGNORE(x) (((x)&0xF) << 0)
#define AD9695_SYSREF_CTRL_2_REG 0x0122
#define AD9695_SYSREF_WIN_NEG(x) (((x)&0x3) << 2)
#define AD9695_SYSREF_WIN_POS(x) (((x)&0x3) << 0)
#define AD9695_SYSREF_CTRL_3_REG 0x0123
#define AD9695_SYSREF_TS_DELAY(x) (((x)&0x7F) << 0)
#define AD9695_SYSREF_STAT_0_REG 0x0128
#define AD9695_SYSREF_STAT_1_REG 0x0129
#define AD9695_SYSREF_STAT_2_REG 0x012A
#define AD9695_CHIP_SYNC_MODE_REG 0x01FF
#define AD9695_SYNC_TS_ENABLE SET_BIT(0)

// Input Buffer Main Current Controls, we can ignore for now
#define AD9695_BUFF_CFG_P_REG 0x1A4C
#define AD9695_BUFF_CTRL_P(x) (((x)&0x3F) << 0)
#define AD9695_BUFF_CFG_N_REG 0x1A4D
#define AD9695_BUFF_CTRL_N(x) (((x)&0x3F) << 0)

// Chip Mode Select (Full Bandwidth)
#define AD9695_ADC_MODE_REG 0x0200
#define AD9695_ADC_MODE(x) (((x)&0x3) << 0)
#define AD9695_ADC_Q_IGNORE SET_BIT(5)

// Chip Decimation Select (Full Sample Rate, DDC Bypassed)
#define AD9695_ADC_DCM_REG 0x0201
#define AD9695_ADC_DCM_RATE(x) (((x)&0xF) << 0)
#define AD9695_DCM_NONE 0x0
#define AD9695_DCM2_EN SET_BIT(0)
#define AD9695_DCM4_EN SET_BIT(1)
#define AD9695_DCM16_EN SET_BIT(2)
#define AD9695_DCM3_EN SET_BIT(3)

// Fast Detect Thresholds and Dwell time
#define AD9695_FD_UT_LSB_REG 0x0247
#define AD9695_FD_UT_LSB(x) (((x)&0xFF) << 0)
#define AD9695_FD_UT_MSB_REG 0x0248
#define AD9695_FD_UT_MSB(x) (((x >> 8) & 0x1F) << 0)
#define AD9695_FD_LT_LSB_REG 0x0249
#define AD9695_FD_LT_LSB(x) (((x)&0xFF) << 0)
#define AD9695_FD_LT_MSB_REG 0x024A
#define AD9695_FD_LT_MSB(x) (((x >> 8) & 0x1F) << 0)
#define AD9695_FD_DWELL_LSB_REG 0x024B
#define AD9695_FD_DWELL_LSB(x) (((x)&0xFF) << 0)
#define AD9695_FD_DWELL_MSB_REG 0x024C
#define AD9695_FD_DWELL_MSB(x) (((x >> 8) & 0xFF) << 0)

// DDC Controls, Ignored
#define AD9695_DDC_SYNC_CTRL_REG 0x0300
#define AD9695_DDC_UPDATE_MODE SET_BIT(7)
#define AD9695_NCO_SOFT_RESET SET_BIT(4)
#define AD9695_NCO_SYSREF_N_SHOT_MODE SET_BIT(1)
#define AD9695_NCO_SYSREF_SYNC_EN SET_BIT(0)
#define AD9695_DDCX_REG_OFFSET 0x20
#define AD9695_DDCX_CTRL0_REG 0x0310
#define AD9695_DDCX_MIXER_SEL SET_BIT(7)
#define AD9695_DDCX_GAIN_SEL SET_BIT(6)
#define AD9695_DDCX_NCO_IF_MODE(x) (((x)&0x3) << 4)
#define AD9695_DDCX_COMPLEX_TO_REAL SET_BIT(3)
#define AD9695_DDCX_DCM_FILT_SEL_0(x) (((x)&0x7) << 0)
#define AD9695_DDCX_DATA_SEL_REG 0x0311
#define AD9695_DDCX_DCM_FILT_SEL_1(x) (((x)&0xF) << 4)
#define AD9695_DDCX_Q_IP_CHB_SEL SET_BIT(2)
#define AD9695_DDCX_I_IP_CHB_SEL SET_BIT(0)
#define AD9695_DDCX_FTW0_REG 0x0316
#define AD9695_DDCX_FTW1_REG 0x0317
#define AD9695_DDCX_FTW2_REG 0x0318
#define AD9695_DDCX_FTW3_REG 0x0319
#define AD9695_DDCX_FTW4_REG 0x031A
#define AD9695_DDCX_FTW5_REG 0x031B
#define AD9695_DDCX_PO0_REG 0x031D
#define AD9695_DDCX_PO1_REG 0x031E
#define AD9695_DDCX_PO2_REG 0x031F
#define AD9695_DDCX_PO3_REG 0x0320
#define AD9695_DDCX_PO4_REG 0x0321
#define AD9695_DDCX_PO5_REG 0x0322
#define AD9695_DDCX_FRAC_REG_OFFSET 0x10
#define AD9695_DDCX_MAW0_REG 0x0390
#define AD9695_DDCX_MAW1_REG 0x0391
#define AD9695_DDCX_MAW2_REG 0x0392
#define AD9695_DDCX_MAW3_REG 0x0393
#define AD9695_DDCX_MAW4_REG 0x0394
#define AD9695_DDCX_MAW5_REG 0x0395
#define AD9695_DDCX_MBW0_REG 0x0398
#define AD9695_DDCX_MBW1_REG 0x0399
#define AD9695_DDCX_MBW2_REG 0x039A
#define AD9695_DDCX_MBW3_REG 0x039B
#define AD9695_DDCX_MBW4_REG 0x039C
#define AD9695_DDCX_MBW5_REG 0x039D

// ADC test mode control (local)
#define AD9695_REG_TEST_MODE 0x0550
//550 -558 are for user patterns, so we don't care
#define AD9695_TEST_MODE_REG 0x0550
#define AD9695_TESTMODE_OFF 0x0
#define AD9695_TESTMODE_MIDSCALE_SHORT 0x1
#define AD9695_TESTMODE_POS_FULLSCALE 0x2
#define AD9695_TESTMODE_NEG_FULLSCALE 0x3
#define AD9695_TESTMODE_ALT_CHECKERBOARD 0x4
#define AD9695_TESTMODE_PN23_SEQ 0x5
#define AD9695_TESTMODE_PN9_SEQ 0x6
#define AD9695_TESTMODE_ONE_ZERO_TOGGLE 0x7
#define AD9695_TESTMODE_USER 0x8
#define AD9695_TESTMODE_RAMP 0xF

// Data Format / Invert (2'c complement and sample data not inverted)
#define AD9695_REG_OUTPUT_MODE 0x0561
#define AD9695_OUTPUT_MODE_REG AD9695_REG_OUTPUT_MODE
#define AD9695_OUTPUT_MODE_OFFSET_BINARY 0x0
#define AD9695_OUTPUT_MODE_TWOS_COMPLEMENT 0x1

// Converter Control Bits (2/16)
#define AD9695_OP_MODE_CTRL_1_REG 0x0559
#define AD9695_OP_MODE_CTRL_2_REG 0x055A
#define AD9695_OP_CONV_CTRL_BIT_SEL(x) (((x)&0xF) >> 0)

// Output Overrage
#define AD9695_OP_OVERANGE_CLR_REG 0x0562
#define AD9695_OP_OVERANGE_STAT_REG 0x0563

//
#define AD9695_JESD_LMFC_OFFSET_REG 0x0578
#define AD9695_JESD_LMFC_OFFSET(x) (((x)&0x1F) >> 0)

// PLL Configure (lane rate range seletion)
#define AD9695_JESD_SERDES_PLL_CFG_REG 0x056E
#define AD9695_JESD_SLR_CTRL(x) (((x)&0xF) << 4)

// PLL Status and Lock
#define AD9695_JESD_SERDES_PLL_REG 0x056F
#define AD9695_JESD_PLL_LOCK_STAT SET_BIT(7)

// ADDED: JESD Link Control (INCLUDEING PHY TEST!!!)
#define AD9695_JESD_LINK_CTRL1_REG 0x0571
#define AD9695_JESD_LINK_CTRL2_REG 0x0572
#define AD9695_JESD_LINK_FORCE_CGS  0b10000000
#define AD9695_JESD_LINK_FORCE_ILAS 0b11000000
#define AD9695_JESD_LINK_CTRL3_REG 0x0573
#define AD9695_JESD_LINK_CTRL4_REG 0x0574



#define AD9695_JESD_LINK_SYNCIN_PIN_CTRL(x) ((x&0b11000000)<<6) 
#define AD9695_JESD_LINK_PDN SET_BIT(0)

// JESD Link IDs
#define AD9695_JESD_ID_CFG_REG_OFFSET 0x3
#define AD9695_JESD_DID_CFG_REG 0x0580
#define AD9695_JESD_BID_CFG_REG 0x0581
#define AD9695_JESD_BID(x) (((x)&0xF) << 0)
#define AD9695_JESD_LID0_CFG_REG 0x0583
#define AD9695_JESD_LID0(x) (((x)&0x1F) << 0)

// JESD NOF LANES (L)
#define AD9695_JESD_CFG_REG_OFFSET 0x8
#define AD9695_JESD_L_SCR_CFG_REG 0x058B
#define AD9695_JESD_SCR_EN SET_BIT(7)
#define AD9695_JESD_LANES(x) ((((x)&0x1F) << 0))

// JESD NOF OCTETS PER FRAME (F)
#define AD9695_JESD_F_CFG_REG 0x058C
#define AD9695_JESD_F(x) ((((x)&0xF) << 0))

// JESD NOF FRAMES PER MULTIFRAME (K)
#define AD9695_JESD_K_CFG_REG 0x058D
#define AD9695_JESD_K(x) ((((x)&0x1F) << 0))

// JESD NUMBER OF CONVERTERS (M)
#define AD9695_JESD_M_CFG_REG 0x058E
#define AD9695_JESD_M(x) ((((x)&0x7) << 0))

// JESD NUMBER OF CONTROL BITS (CS) AND ADC RESOLUTION (N)
#define AD9695_JESD_CS_N_CFG_REG 0x058F
#define AD9695_JESD_CS(x) (((x)&0x3) << 6)
#define AD9695_JESD_N(x) ((((x)&0x1F) << 0))

// JESD SUBCLASS AND BITS PER FRAME (N')
#define AD9695_JESD_SCV_NP_CFG_REG 0x0590
#define AD9695_JESD_SUBCLASS(x) (((x)&0x7) << 5)
#define AD9695_JESD_NP(x) ((((x)&0x1F) << 0))
#define AD9695_JESD_S_CFG_REG 0x0591
#define AD9695_JESD_S(x) (((x)&0x1F) << 0)

// JESD HIGH DENSITY
#define AD9695_JESD_HD_CF_CFG_REG 0x0592
#define AD9695_JESD_HD SET_BIT(7)
#define AD9695_JESD_CF(x) (((x)&0x1F) << 0)

// DC offset calibration enable
#define AD9695_DC_OFFSET_CAL_CTRL 0x0701
#define AD9695_DC_OFFSET_CAL_EN SET_BIT(7)

// VREF external select
#define AD9695_VREF_CTRL_REG 0x18A6
#define AD9695_EXT_VREF_MODE SET_BIT(0)

// External VCM buffer
#define AD9695_EXT_VCM_CTRL_REG 0x18E3
#define AD9695_EXT_VCM_BUFF SET_BIT(6)
#define AD9695_EXT_VCM_BUFF_CURR(x) (((x)&0x3F) << 0)

// Temperature
#define AD9695_TEMP_DIODE_CTRL_REG 0x18E6
#define AD9695_CENTRAL_DIODE_1X_EN SET_BIT(0)
#define AD9695_CENTRAL_DIODE_20X_EN SET_BIT(1)

// AC or DC coupling
#define AD9695_ANALOG_CFG_REG 0x1908
#define AD9695_DC_COUPLE_EN(x) (((x)&0x1) << 2)

// Full Scale Adjustments
#define AD9695_FULL_SCALE_CFG_REG 0x1910
#define AD9695_TRM_VREF(x) (((x)&0xF) << 0)

#endif
