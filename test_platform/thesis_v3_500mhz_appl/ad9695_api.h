/* ad9695_api.h
 * Unified AD9695 API header generated by merging:
 *   - ad9695_api.h
 *   - ad9695_adc_api.c (public prototypes)
 *   - ad9695_jesd_api.c (public prototypes)
 *
 * Logic, function names, and data types remain **unchanged**.
 * Comment blocks have been streamlined and ASCII‑art banners removed.
 */

#ifndef AD9695_API_H
#define AD9695_API_H

#include <stdint.h>

/** JESD Interface Parameters. */
struct jesd_param_t{
	uint8_t jesd_L;	    /**< JESD # of Lanes Param L. */
	uint8_t jesd_F;	    /**< JESD Octets/Frame Param F. */
	uint8_t jesd_M;	    /**< JESD # of Converters Param M. */
	uint8_t jesd_S;	    /**< JESD # of Samples trasmitted / converter / frame. Set automatically. */

	uint8_t jesd_HD;    /** JESD High Density Param HD.*/
	uint8_t jesd_K;	    /**< JESD frames/multiframe Param K.  */
	uint8_t jesd_N;	    /**< JESD Converter Resolution Param N.  */
	uint8_t jesd_NP;    /**< JESD Bit Packing Sample NP. ADC number of bits per sample*/
	uint8_t jesd_CF;    /**< JESD Param CF. Control words per frame */
	uint8_t jesd_CS;    /**< JESD Param CS. Control Bits per sample */

	uint8_t jesd_DID;   /**< JESD Device ID Param DID. */
	uint8_t jesd_BID;   /**< JESD Bank ID. Param BID */
	uint8_t jesd_LID0;  /**< JESD Lane ID for Lane 0 Param LIDO*/
	uint8_t jesd_JESDV; /**< JESD Version */
};

/** Enumerates Data Format Type Complex/Real*/
typedef enum {
	AD9695_DATA_FRMT_REAL = 0x0,  /**< Real Data*/
	AD9695_DATA_FRMT_COMPLEX      /**< Complex Data */
} ad9695_adc_data_frmt_t;

/** Enumerates ADC Channels*/
typedef enum {
	AD9695_ADC_CH_NONE = 0x0,   /**< No ADC Channel*/
	AD9695_ADC_CH_A,	    /**< ADC Channel A */
	AD9695_ADC_CH_B,	    /**< ADC Channel B*/
	AD9695_ADC_CH_ALL	    /**< ALL ADC Channels*/
} ad9695_adc_ch_t;

/** Enumerates ADC Full Scale Range Modes*/
typedef enum {
	AD9695_ADC_SCALE_2P04_VPP = 0,	/**< 2.04 Vpp Differential*/
	AD9695_ADC_SCALE_1P13_VPP,	/**< 1.13 Vpp Differential */
	AD9695_ADC_SCALE_1P25_VPP,	/**< 1.25 Vpp Differential */
	AD9695_ADC_SCALE_1P7_VPP,	/**< 1.70 Vpp Differential*/
	AD9695_ADC_SCALE_1P81_VPP,	/**< 1.81 Vpp Differential*/
	AD9695_ADC_SCALE_1P93_VPP	/**< 1.93 Vpp Differential*/
} ad9695_adc_scale_range_t;

/** Enumerates ADC Input Buffer Currents */
typedef enum {
	AD9695_ADC_BUFF_CURR_400_UA = 0x4,   /**< Buffer Current set to 400 uA*/
	AD9695_ADC_BUFF_CURR_500_UA = 0x9,   /**< Buffer Current set to 500 uA*/
	AD9695_ADC_BUFF_CURR_600_UA = 0x1E,  /**< Buffer Current set to 600 uA*/
	AD9695_ADC_BUFF_CURR_700_UA = 0x23,  /**< Buffer Current set to 700 uA*/
	AD9695_ADC_BUFF_CURR_800_UA = 0x28,  /**< Buffer Current set to 800 uA*/
	AD9695_ADC_BUFF_CURR_1000_UA = 0x32, /**< Buffer Current set to 1000 uA*/
} ad9695_adc_buff_curr_t;

/** Enumerates ADC NCO Modes*/
typedef enum {
	AD9695_ADC_NCO_VIF = 0,	  /**< Variable IF Mode*/
	AD9695_ADC_NCO_ZIF = 1,	  /**< Zero IF Mode */
	AD9695_ADC_NCO_TEST = 3,  /**< Test Mode*/
	AD9695_ADC_NCO_INVLD = 4  /**< Invalid NCO Mode*/
} ad9695_adc_nco_mode_t;

/** Enumerates AD9695 Powerdown Modes*/
typedef enum {
	AD9695_POWERUP = 0x0,	/**< Normal Operational Powerup*/
	AD9695_STANDBY = 0x2,	/**< Standby Mode Powerup */
	AD9695_POWERDOWN = 0x3	/**< Full Powerdown Mode*/
} ad9695_pdn_mode_t;

/** Enumerates SERDES PLL Status Flags*/
typedef enum {
	AD9695_PLL_LOCK_STAT = 0x8, /**< Serdes PLL lock Status Flag*/
	AD9695_PLL_LOSSLOCK = 0x4   /**< Serdes PLL Lost Lock Status Flag*/
} ad9695_jesd_serdes_pll_flg_t;

/* =============================================================
 *  CHIP‑LEVEL CONTROL
 * ===========================================================*/
void ad9695_init(void);
void ad9695_hardware_reset(void);
void ad9695_software_reset(void);

/* Channel‑selection helpers */
void ad9695_adc_set_channel_select(uint8_t ch);
void ad9695_adc_get_channel_select(uint8_t *ch);

/* Power‑down pin behaviour (pin_en: 0‑ignore; pin_mode per datasheet) */
void ad9695_set_pdn_pin_mode(uint8_t pin_en, uint8_t pin_mode);

/* Input‑clock divider (valid values 1/2/4) */
void ad9695_set_input_clk_cfg(uint8_t div);

/* Per‑channel power‑down mode (0 = Normal, see reg 0x0002) */
void ad9695_adc_set_ch_pdn_mode(uint8_t mode);

/* =============================================================
 *  ADC PATH CONFIGURATION
 * ===========================================================*/
void ad9695_adc_set_clk_phase(uint8_t ch, uint8_t phase_adj);
void ad9695_adc_set_dc_offset_filt_en(uint8_t en);
void ad9695_adc_set_fc_ch_mode(uint8_t fc_ch);
void ad9695_adc_delay_mode(uint8_t mode);
void ad9695_adc_fine_delay(uint8_t fine_delay);
void ad9695_adc_super_fine_delay(uint8_t super_fine_delay);

/* =============================================================
 *  JESD LINK CONFIGURATION
 * ===========================================================*/
struct jesd_param_t;    /* Forward‑declared from ad9695_api_def.h */

void ad9695_jesd_set_if_config(struct jesd_param_t jesd_param,
                               uint64_t sample_clk_freq_khz,
                               uint64_t *lane_rate_kbps);
void ad9695_jesd_get_cfg_param(struct jesd_param_t *jesd_param);
void ad9695_jesd_enable_link(uint8_t en);
void ad9695_jesd_enable_scrambler(uint8_t en);
void ad9695_jesd_get_pll_status(uint8_t *pll_status);
void ad9695_jesd_subclass_set(uint8_t subclass);
void ad9695_jesd_syref_mode_set(uint8_t mode, uint8_t sysref_count);

#endif /* AD9695_API_H */